// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/policy_short.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PolicyEncodingType enumerates supported marshaling types for policies.
type PolicyMarshalingType int32

const (
	// Fallback value for a missing Marshaling Type
	PolicyMarshalingType_UNKNOWN PolicyMarshalingType = 0
	// Policy Marshaled as a YAML Short Policy definition
	PolicyMarshalingType_SHORT_YAML PolicyMarshalingType = 1
	// Policy Marshaled as a JSON Short Policy definition
	PolicyMarshalingType_SHORT_JSON PolicyMarshalingType = 2
)

var PolicyMarshalingType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SHORT_YAML",
	2: "SHORT_JSON",
}

var PolicyMarshalingType_value = map[string]int32{
	"UNKNOWN":    0,
	"SHORT_YAML": 1,
	"SHORT_JSON": 2,
}

func (x PolicyMarshalingType) String() string {
	return proto.EnumName(PolicyMarshalingType_name, int32(x))
}

func (PolicyMarshalingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{0}
}

// PolicyShort is a compact Policy definition which is conveniently expressed
// as JSON or YAML. The shorthand format is used created a Policy.
type PolicyShort struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// meta field stores arbitrary key-values from users
	Meta map[string]string `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// resources defines resources within a policy.
	// map keys define the name for a resource
	Resources map[string]*ResourceShort `protobuf:"bytes,5,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// actor resource defines the actor resource for the policy
	// optional.
	Actor *ActorResource `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`
	// specify the policy version
	Version string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PolicyShort) Reset()         { *m = PolicyShort{} }
func (m *PolicyShort) String() string { return proto.CompactTextString(m) }
func (*PolicyShort) ProtoMessage()    {}
func (*PolicyShort) Descriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{0}
}
func (m *PolicyShort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyShort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyShort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyShort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyShort.Merge(m, src)
}
func (m *PolicyShort) XXX_Size() int {
	return m.Size()
}
func (m *PolicyShort) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyShort.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyShort proto.InternalMessageInfo

func (m *PolicyShort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyShort) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PolicyShort) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolicyShort) GetResources() map[string]*ResourceShort {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PolicyShort) GetActor() *ActorResource {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *PolicyShort) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ResourceShort struct {
	Doc         string                      `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Permissions map[string]*PermissionShort `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Relations   map[string]*RelationShort   `protobuf:"bytes,3,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ResourceShort) Reset()         { *m = ResourceShort{} }
func (m *ResourceShort) String() string { return proto.CompactTextString(m) }
func (*ResourceShort) ProtoMessage()    {}
func (*ResourceShort) Descriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{1}
}
func (m *ResourceShort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceShort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceShort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceShort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceShort.Merge(m, src)
}
func (m *ResourceShort) XXX_Size() int {
	return m.Size()
}
func (m *ResourceShort) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceShort.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceShort proto.InternalMessageInfo

func (m *ResourceShort) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *ResourceShort) GetPermissions() map[string]*PermissionShort {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ResourceShort) GetRelations() map[string]*RelationShort {
	if m != nil {
		return m.Relations
	}
	return nil
}

type RelationShort struct {
	Doc string `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	// list of relations managed by the current relation
	Manages []string `protobuf:"bytes,2,rep,name=manages,proto3" json:"manages,omitempty"`
	// types define a list of target types the current relation can point to.
	// Each type restriction points to a a resource's relation.
	// The syntax for a type restriction is "{resource}->{relation}", where relation is optional.
	// An empty relation means the relationship can only point to an object node, as opposed to an userset.
	Types []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
}

func (m *RelationShort) Reset()         { *m = RelationShort{} }
func (m *RelationShort) String() string { return proto.CompactTextString(m) }
func (*RelationShort) ProtoMessage()    {}
func (*RelationShort) Descriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{2}
}
func (m *RelationShort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationShort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationShort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationShort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationShort.Merge(m, src)
}
func (m *RelationShort) XXX_Size() int {
	return m.Size()
}
func (m *RelationShort) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationShort.DiscardUnknown(m)
}

var xxx_messageInfo_RelationShort proto.InternalMessageInfo

func (m *RelationShort) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *RelationShort) GetManages() []string {
	if m != nil {
		return m.Manages
	}
	return nil
}

func (m *RelationShort) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type PermissionShort struct {
	Doc  string `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	Expr string `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (m *PermissionShort) Reset()         { *m = PermissionShort{} }
func (m *PermissionShort) String() string { return proto.CompactTextString(m) }
func (*PermissionShort) ProtoMessage()    {}
func (*PermissionShort) Descriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{3}
}
func (m *PermissionShort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionShort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionShort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionShort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionShort.Merge(m, src)
}
func (m *PermissionShort) XXX_Size() int {
	return m.Size()
}
func (m *PermissionShort) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionShort.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionShort proto.InternalMessageInfo

func (m *PermissionShort) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *PermissionShort) GetExpr() string {
	if m != nil {
		return m.Expr
	}
	return ""
}

// MarshaledPolicy represents a PolicyShort object
// marshaled to a known encoding format
type MarshaledPolicy struct {
	Policy string               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Type   PolicyMarshalingType `protobuf:"varint,2,opt,name=type,proto3,enum=sourcehub.acp.PolicyMarshalingType" json:"type,omitempty"`
}

func (m *MarshaledPolicy) Reset()         { *m = MarshaledPolicy{} }
func (m *MarshaledPolicy) String() string { return proto.CompactTextString(m) }
func (*MarshaledPolicy) ProtoMessage()    {}
func (*MarshaledPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c325dfcf3b3438a4, []int{4}
}
func (m *MarshaledPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarshaledPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarshaledPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarshaledPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarshaledPolicy.Merge(m, src)
}
func (m *MarshaledPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MarshaledPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MarshaledPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MarshaledPolicy proto.InternalMessageInfo

func (m *MarshaledPolicy) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *MarshaledPolicy) GetType() PolicyMarshalingType {
	if m != nil {
		return m.Type
	}
	return PolicyMarshalingType_UNKNOWN
}

func init() {
	proto.RegisterEnum("sourcehub.acp.PolicyMarshalingType", PolicyMarshalingType_name, PolicyMarshalingType_value)
	proto.RegisterType((*PolicyShort)(nil), "sourcehub.acp.PolicyShort")
	proto.RegisterMapType((map[string]string)(nil), "sourcehub.acp.PolicyShort.MetaEntry")
	proto.RegisterMapType((map[string]*ResourceShort)(nil), "sourcehub.acp.PolicyShort.ResourcesEntry")
	proto.RegisterType((*ResourceShort)(nil), "sourcehub.acp.ResourceShort")
	proto.RegisterMapType((map[string]*PermissionShort)(nil), "sourcehub.acp.ResourceShort.PermissionsEntry")
	proto.RegisterMapType((map[string]*RelationShort)(nil), "sourcehub.acp.ResourceShort.RelationsEntry")
	proto.RegisterType((*RelationShort)(nil), "sourcehub.acp.RelationShort")
	proto.RegisterType((*PermissionShort)(nil), "sourcehub.acp.PermissionShort")
	proto.RegisterType((*MarshaledPolicy)(nil), "sourcehub.acp.MarshaledPolicy")
}

func init() { proto.RegisterFile("sourcehub/acp/policy_short.proto", fileDescriptor_c325dfcf3b3438a4) }

var fileDescriptor_c325dfcf3b3438a4 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xf3, 0x54, 0xae, 0xd5, 0x34, 0x1a, 0x55, 0xc8, 0x8a, 0x90, 0x15, 0x05, 0x16, 0x01,
	0x84, 0x23, 0x05, 0xa4, 0x54, 0xec, 0x0a, 0x42, 0x94, 0x47, 0x92, 0xe2, 0x14, 0x21, 0xba, 0xa0,
	0x9a, 0x38, 0xa3, 0xc4, 0x6a, 0xe2, 0xb1, 0xc6, 0x93, 0x52, 0xff, 0x05, 0xbf, 0xc1, 0x9f, 0xb0,
	0xec, 0x92, 0x25, 0x4a, 0xbe, 0x82, 0x1d, 0x9a, 0x19, 0x3b, 0x71, 0x5c, 0x2b, 0x8b, 0xee, 0xe6,
	0xce, 0x3d, 0xe7, 0xdc, 0x7b, 0xcf, 0x3c, 0xa0, 0x19, 0xd0, 0x25, 0x73, 0xc8, 0x6c, 0x39, 0xee,
	0x60, 0xc7, 0xef, 0xf8, 0x74, 0xee, 0x3a, 0xe1, 0x65, 0x30, 0xa3, 0x8c, 0x5b, 0x3e, 0xa3, 0x9c,
	0xa2, 0x83, 0x0d, 0xc2, 0xc2, 0x8e, 0xdf, 0x68, 0x64, 0x11, 0x14, 0xb4, 0xf5, 0xab, 0x00, 0xfa,
	0x99, 0xdc, 0x18, 0x09, 0x01, 0x84, 0xa0, 0xe8, 0xe1, 0x05, 0x31, 0xb4, 0xa6, 0xd6, 0xae, 0xda,
	0x72, 0x8d, 0x9a, 0xa0, 0x4f, 0x48, 0xe0, 0x30, 0xd7, 0xe7, 0x2e, 0xf5, 0x8c, 0xbc, 0x4c, 0x25,
	0xb7, 0xd0, 0x31, 0x14, 0x17, 0x84, 0x63, 0xa3, 0xd8, 0x2c, 0xb4, 0xf5, 0xee, 0x63, 0x6b, 0xa7,
	0xbe, 0x95, 0xd0, 0xb7, 0xfa, 0x84, 0xe3, 0xb7, 0x1e, 0x67, 0xa1, 0x2d, 0x19, 0xe8, 0x1d, 0x54,
	0x19, 0x51, 0xf0, 0xc0, 0x28, 0x49, 0xfa, 0x93, 0x3d, 0x74, 0x3b, 0xc6, 0x2a, 0x8d, 0x2d, 0x17,
	0x75, 0xa1, 0x84, 0x1d, 0x4e, 0x99, 0x51, 0x6e, 0x6a, 0x6d, 0xbd, 0xfb, 0x30, 0x25, 0x72, 0x22,
	0x72, 0x31, 0xdb, 0x56, 0x50, 0x64, 0x40, 0xe5, 0x9a, 0xb0, 0x40, 0x0c, 0x55, 0x91, 0x43, 0xc5,
	0x61, 0xa3, 0x07, 0xd5, 0x4d, 0xa7, 0xa8, 0x0e, 0x85, 0x2b, 0x12, 0x46, 0x96, 0x88, 0x25, 0x3a,
	0x82, 0xd2, 0x35, 0x9e, 0x2f, 0x49, 0xe4, 0x85, 0x0a, 0x5e, 0xe5, 0x8f, 0xb5, 0xc6, 0x05, 0xd4,
	0x76, 0x7b, 0xcc, 0x60, 0x77, 0x93, 0xec, 0xbb, 0xad, 0xc6, 0x7c, 0x39, 0x71, 0x42, 0xbb, 0xf5,
	0x2f, 0x0f, 0x07, 0x3b, 0x49, 0xa1, 0x3d, 0xa1, 0x4e, 0xac, 0x3d, 0xa1, 0x0e, 0x1a, 0x82, 0xee,
	0x13, 0xb6, 0x70, 0x03, 0x31, 0x46, 0x60, 0xe4, 0xa5, 0xa3, 0xcf, 0xf7, 0x55, 0xb0, 0xce, 0xb6,
	0x78, 0xe5, 0x6a, 0x52, 0x01, 0xbd, 0x17, 0x07, 0x34, 0xc7, 0x5c, 0xca, 0x15, 0xa4, 0xdc, 0xb3,
	0xbd, 0x72, 0x76, 0x8c, 0xde, 0x1c, 0x51, 0x14, 0x37, 0xbe, 0x43, 0x3d, 0x5d, 0x2b, 0xc3, 0x9d,
	0x97, 0xbb, 0xee, 0x98, 0xe9, 0xdb, 0xb0, 0x51, 0x48, 0xfb, 0xa3, 0xbc, 0x4f, 0x16, 0xbf, 0x8f,
	0xf7, 0x8a, 0x7f, 0xc7, 0xfb, 0xcf, 0xc2, 0xfa, 0x44, 0x2e, 0xc3, 0x7a, 0x03, 0x2a, 0x0b, 0xec,
	0xe1, 0x29, 0x51, 0xb6, 0x57, 0xed, 0x38, 0x14, 0xd7, 0x85, 0x87, 0x3e, 0x51, 0xfe, 0x55, 0x6d,
	0x15, 0xb4, 0x7a, 0x70, 0x98, 0x1a, 0x26, 0x43, 0x14, 0x41, 0x91, 0xdc, 0xf8, 0x2c, 0xba, 0x68,
	0x72, 0xdd, 0x1a, 0xc3, 0x61, 0x1f, 0xb3, 0x60, 0x86, 0xe7, 0x64, 0xa2, 0x1e, 0x07, 0x7a, 0x00,
	0x65, 0xf5, 0xac, 0x23, 0x6e, 0x14, 0xa1, 0x1e, 0x14, 0x45, 0x31, 0x49, 0xaf, 0x75, 0x1f, 0x65,
	0xbe, 0xac, 0x48, 0xcb, 0xf5, 0xa6, 0xe7, 0xa1, 0x4f, 0x6c, 0x49, 0x78, 0xfa, 0x06, 0x8e, 0xb2,
	0xb2, 0x48, 0x87, 0xca, 0x97, 0xc1, 0xc7, 0xc1, 0xf0, 0xeb, 0xa0, 0x9e, 0x43, 0x35, 0x80, 0xd1,
	0xe9, 0xd0, 0x3e, 0xbf, 0xfc, 0x76, 0xd2, 0xff, 0x54, 0xd7, 0xb6, 0xf1, 0x87, 0xd1, 0x70, 0x50,
	0xcf, 0xbf, 0x3e, 0xfd, 0xbd, 0x32, 0xb5, 0xdb, 0x95, 0xa9, 0xfd, 0x5d, 0x99, 0xda, 0xcf, 0xb5,
	0x99, 0xbb, 0x5d, 0x9b, 0xb9, 0x3f, 0x6b, 0x33, 0x77, 0x61, 0x4d, 0x5d, 0x2e, 0xba, 0x70, 0xe8,
	0xa2, 0xa3, 0x7a, 0xf2, 0x08, 0xff, 0x41, 0xd9, 0x55, 0x67, 0xfb, 0x57, 0xdd, 0xc8, 0xdf, 0x4a,
	0x7a, 0x35, 0x2e, 0xcb, 0xdf, 0xea, 0xc5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x9e, 0xdf,
	0x56, 0xfc, 0x04, 0x00, 0x00,
}

func (m *PolicyShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyShort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyShort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyShort(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyShort(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyShort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Meta) > 0 {
		for k := range m.Meta {
			v := m.Meta[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyShort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceShort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceShort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for k := range m.Relations {
			v := m.Relations[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyShort(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyShort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Permissions) > 0 {
		for k := range m.Permissions {
			v := m.Permissions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPolicyShort(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPolicyShort(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationShort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationShort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Manages) > 0 {
		for iNdEx := len(m.Manages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Manages[iNdEx])
			copy(dAtA[i:], m.Manages[iNdEx])
			i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Manages[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionShort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionShort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarshaledPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarshaledPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarshaledPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPolicyShort(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policy) > 0 {
		i -= len(m.Policy)
		copy(dAtA[i:], m.Policy)
		i = encodeVarintPolicyShort(dAtA, i, uint64(len(m.Policy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicyShort(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyShort(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyShort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPolicyShort(uint64(len(k))) + 1 + len(v) + sovPolicyShort(uint64(len(v)))
			n += mapEntrySize + 1 + sovPolicyShort(uint64(mapEntrySize))
		}
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyShort(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyShort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyShort(uint64(mapEntrySize))
		}
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	return n
}

func (m *ResourceShort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	if len(m.Permissions) > 0 {
		for k, v := range m.Permissions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyShort(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyShort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyShort(uint64(mapEntrySize))
		}
	}
	if len(m.Relations) > 0 {
		for k, v := range m.Relations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPolicyShort(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPolicyShort(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPolicyShort(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RelationShort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	if len(m.Manages) > 0 {
		for _, s := range m.Manages {
			l = len(s)
			n += 1 + l + sovPolicyShort(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovPolicyShort(uint64(l))
		}
	}
	return n
}

func (m *PermissionShort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	return n
}

func (m *MarshaledPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovPolicyShort(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPolicyShort(uint64(m.Type))
	}
	return n
}

func sovPolicyShort(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyShort(x uint64) (n int) {
	return sovPolicyShort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyShort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyShort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[string]*ResourceShort)
			}
			var mapkey string
			var mapvalue *ResourceShort
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyShort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceShort{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyShort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &ActorResource{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyShort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = make(map[string]*PermissionShort)
			}
			var mapkey string
			var mapvalue *PermissionShort
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyShort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PermissionShort{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyShort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Permissions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relations == nil {
				m.Relations = make(map[string]*RelationShort)
			}
			var mapkey string
			var mapvalue *RelationShort
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPolicyShort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPolicyShort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPolicyShort
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RelationShort{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPolicyShort(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPolicyShort
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Relations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyShort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manages = append(m.Manages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyShort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyShort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarshaledPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarshaledPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarshaledPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicyShort
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyShort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyShort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyShort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyShort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyShort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyShort
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyShort
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyShort
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyShort        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyShort          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyShort = fmt.Errorf("proto: unexpected end of group")
)
