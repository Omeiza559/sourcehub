syntax = "proto3";

package sourcehub.acp;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sourcehub/acp/params.proto";

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/params";
  
  }
  
  // Queries a list of Policy items.
  rpc Policy (QueryPolicyRequest) returns (QueryPolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy/{id}";
  
  }
  
  // Queries a list of PolicyIds items.
  rpc PolicyIds (QueryPolicyIdsRequest) returns (QueryPolicyIdsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy_i_ds";
  
  }
  
  // Queries a list of FilterRelationships items.
  rpc FilterRelationships (QueryFilterRelationshipsRequest) returns (QueryFilterRelationshipsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/filter_relationships/{policyId}";
  
  }
  
  // Queries a list of VerifyAccessRequest items.
  rpc VerifyAccessRequest (QueryVerifyAccessRequestRequest) returns (QueryVerifyAccessRequestResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/verify_access_request/{policyId}";
  
  }
  
  // Queries a list of ValidatePolicy items.
  rpc ValidatePolicy (QueryValidatePolicyRequest) returns (QueryValidatePolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/validate_policy/{policy}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryPolicyRequest {
  string id = 1;
}

message QueryPolicyResponse {}

message QueryPolicyIdsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPolicyIdsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
}

message QueryFilterRelationshipsRequest {
  string policyId = 1;
}

message QueryFilterRelationshipsResponse {}

message QueryVerifyAccessRequestRequest {
  string policyId = 1;
}

message QueryVerifyAccessRequestResponse {}

message QueryValidatePolicyRequest {
  string policy = 1;
}

message QueryValidatePolicyResponse {}

